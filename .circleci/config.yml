# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks. 
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1
  aws-ecr: circleci/aws-ecr@6.15.2
  aws-eb: circleci/aws-elastic-beanstalk@1.0.2

defaults: &defaults
  docker:
    - image: circleci/node:15.1
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          name: Restore yarn cache
          key: node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Install modules
          command: yarn --frozen-lockfile install
      - save_cache:
          name: Save yarn cache
          key: node-modules-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run:
          name: Building services
          command: yarn build
          no_output_timeout: 30m
      - persist_to_workspace:
          root: ./
          paths:
            - build
            - src
            - devops
            - .git
            - node_modules
            - yarn.lock
            - package.json
            - tsconfig.json
            - docker-compose.yaml
            - Dockerfile
            - nginx.conf
            - start.sh

  push-image:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Prepare directory
          command: |
           TAG=`echo $CIRCLE_BRANCH | sed 's/\\//_/g'`
           echo "TAG is $TAG"
           echo "export TAG=$TAG" >> $BASH_ENV
      # These envvars are set in CircleCI
      - aws-ecr/build-and-push-image:
          setup-remote-docker: true
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
          create-repo: true
          checkout: false
          repo: serto-search-frontend
          tag: "$TAG,$TAG-$CIRCLE_SHA1"
  
  eb-deploy:
    docker:
      - image: 'cimg/base:stable'
    parameters:
      app-dir:
        default: .
        type: string
      description:
        default: ''
        type: string
      environment-name:
        default: ''
        type: string
      image:
        default: 'cimg/base:stable'
        type: string
      label:
        default: ''
        type: string
      platform-version:
        default: docker
        type: string
    steps:
      - attach_workspace:
          at: ./
      - aws-eb/setup
      - run:
          name: Prepare directory
          command: |
           ls -al .
           TAG=`echo $CIRCLE_BRANCH | sed 's/\\//_/g'`
           echo "TAG is $TAG"
           echo "export TAG=$TAG" >> $BASH_ENV
           sed -i='' "s/<TAG>/$TAG-$CIRCLE_SHA1/" ./devops/deploy/docker-compose.yaml
      - run:
          command: >
            eb init <<parameters.environment-name>> -r $AWS_DEFAULT_REGION -p 
            <<parameters.platform-version>>

            eb deploy <<parameters.environment-name>> <<#parameters.label>>-l
            <<parameters.label>><</parameters.label>> <<#parameters.description>>-m
            <<parameters.description>><</parameters.description>>
          name: EB Deploy
          working_directory: <<parameters.app-dir>>


workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  build-deploy:
    jobs:
      - build
      - push-image:
          filters:
            branches:
              only:
              - main
              - nickreynolds/circleci
          requires:
            - build
      - eb-deploy:
          app-dir: ./devops/deploy
          environment-name: SertoSearchFrontendStaging
          label: version-<<pipeline.number>>
          filters:
            branches:
              only:
                - main
                - nickreynolds/circleci
          requires:
            - push-image